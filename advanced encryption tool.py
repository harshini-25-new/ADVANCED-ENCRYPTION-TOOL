# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

!pip install pycryptodome

from Crypto.Cipher import AES
from Crypto.Protocol.KDF import scrypt
from Crypto.Util.Padding import pad, unpad
import os
from google.colab import files

# AES encryption and decryption class
class EncryptionTool:
    def __init__(self, password):
        self.password = password.encode('utf-8')
        self.salt = os.urandom(16)  # Random salt for key derivation

    def derive_key(self):
        # Using scrypt to derive a 256-bit key from the password
        key = scrypt(self.password, self.salt, key_len=32, N=2**14, r=8, p=1)
        return key

    def encrypt(self, file_path):
        key = self.derive_key()
        cipher = AES.new(key, AES.MODE_CBC)

        # Read file data and pad it to be a multiple of block size (AES block size is 16 bytes)
        with open(file_path, 'rb') as file:
            file_data = file.read()
            padded_data = pad(file_data, AES.block_size)

        # Encrypt data
        encrypted_data = cipher.encrypt(padded_data)

        # Combine salt, iv (cipher initialization vector), and encrypted data
        encrypted_file_data = self.salt + cipher.iv + encrypted_data

        encrypted_file_path = file_path + ".enc"
        with open(encrypted_file_path, 'wb') as file:
            file.write(encrypted_file_data)

        return encrypted_file_path

    def decrypt(self, file_path):
        key = self.derive_key()

        with open(file_path, 'rb') as file:
            file_data = file.read()
            salt = file_data[:16]  # First 16 bytes are the salt
            iv = file_data[16:32]  # Next 16 bytes are the initialization vector
            encrypted_data = file_data[32:]  # Rest is the encrypted data

        cipher = AES.new(key, AES.MODE_CBC, iv)
        decrypted_data = unpad(cipher.decrypt(encrypted_data), AES.block_size)

        decrypted_file_path = file_path.replace(".enc", ".dec")
        with open(decrypted_file_path, 'wb') as file:
            file.write(decrypted_data)

        return decrypted_file_path

# Function to handle file uploads and encryption
def encrypt_file():
    password = input("Enter password for encryption: ")
    file = files.upload()

    for file_name in file.keys():
        tool = EncryptionTool(password)
        encrypted_file = tool.encrypt(file_name)
        print(f"File encrypted successfully: {encrypted_file}")
        files.download(encrypted_file)

# Function to handle file uploads and decryption
def decrypt_file():
    password = input("Enter password for decryption: ")
    file = files.upload()

    for file_name in file.keys():
        if not file_name.endswith('.enc'):
            print(f"Invalid file: {file_name}. Please upload an encrypted file (.enc).")
            continue

        tool = EncryptionTool(password)
        decrypted_file = tool.decrypt(file_name)
        print(f"File decrypted successfully: {decrypted_file}")
        files.download(decrypted_file)

encrypt_file()